AK8S-04 Creating a GKE Cluster via Cloud Shell


1. In Cloud Shell, type the following command to set the environment variable for the zone and cluster name


export my_zone=us-central1-a
export my_cluster=standard-cluster-1


2. In Cloud Shell, type the following command to create a Kubernetes cluster

gcloud container clusters create $my_cluster --num-nodes 3 --zone $my_zone --enable-ip-alias


Task 2. Modify GKE clusters


1. In Cloud Shell, execute the following command to modify standard-cluster-1 to have four nodes:

gcloud container clusters resize $my_cluster --zone $my_zone --size=4


Task 3. Connect to a GKE cluster


1. To create a kubeconfig file with the credentials of the current user (to allow authentication) and provide the endpoint details for a specific cluster (to allow communicating with that cluster through the kubectl command-line tool), execute the following command:

gcloud container clusters get-credentials $my_cluster --zone $my_zone


2. Open the kubeconfig file with the nano text editor:

nano ~/.kube/config


Task 4. Use kubectl to inspect a GKE cluster


1.In Cloud Shell, execute the following command to print out the content of the kubeconfig file:

kubectl config view


2. In Cloud Shell, execute the following command to print out the cluster information for the active context:


kubectl cluster-info

3.In Cloud Shell, execute the following command to print out the active context:

kubectl config current-context

4.In Cloud Shell, execute the following command to print out some details for all the cluster contexts in the kubeconfig file:

kubectl config get-contexts

5.In Cloud Shell, execute the following command to change the active context:

kubectl config use-context gke_${GOOGLE_CLOUD_PROJECT}_us-central1-a_standard-cluster-1


6.In Cloud Shell, execute the following command to view the resource usage across the nodes of the cluster:

kubectl top nodes

7.In Cloud Shell, execute the following command to enable bash autocompletion for kubectl:

source <(kubectl completion bash)

8. In Cloud Shell, type kubectl and press the Tab key twice

kubectl  

9.In Cloud Shell, type kubectl co and press the Tab key twice

kubectl co



Task 5. Deploy Pods to GKE clusters


1.In Cloud Shell, execute the following command to deploy the latest version of nginx as a Pod named nginx-1:

kubectl create deployment nginx-1 --image nginx:latest


2. In Cloud Shell, execute the following command to view all the deployed Pods in the active context cluster:


kubectl get pods


3.You will now enter your Pod name into a variable that we will use throughout this lab. Using variables like this can help you minimize human error when typing long names. You must type your Pod's unique name in place of [your_pod_name].

export my_nginx_pod=nginx-1-74c7bbdb84-nvwsc

4.Confirm that you have set the environment variable successfully by having the shell echo the value back to you:

echo $my_nginx_pod

5.In Cloud Shell, execute the following command to view the complete details of the Pod you just created.

kubectl describe pod $my_nginx_pod


Push a file into a container

1.In Cloud Shell, type the following commands to open a file named test.html in the nano text editor

nano ~/test.html

2.Add the following text (shell script) to the empty test.html file:

<html> <header><title>This is title</title></header>
<body> Hello world </body>
</html>

3.Press CTRL+X, then press Y and enter to save the file and exit the nano editor.

4.In Cloud Shell, execute the following command to place the file into the appropriate location within the nginx container in the nginx Pod to be served statically:

kubectl cp ~/test.html $my_nginx_pod:/usr/share/nginx/html/test.html


Expose the Pod for testing

1.In Cloud Shell, execute the following command to create a service to expose our nginx Pod externally:

kubectl expose pod $my_nginx_pod --port 80 --type LoadBalancer

2.In Cloud Shell, execute the following command to view details about services in the cluster:

kubectl get services


3.In Cloud Shell, execute the following command to verify that the nginx container is serving the static HTML file that you copied.

curl http://104.154.177.46/test.html


4.In Cloud Shell, execute the following command to view the resources being used by the nginx Pod:

kubectl top pods


Task 6. Introspect GKE Pods


1.In Cloud Shell enter the following command to clone the repository to the lab Cloud Shell.

git clone https://github.com/GoogleCloudPlatformTraining/training-data-analyst

2.Change to the directory that contains the sample files for this lab.
cd ~/training-data-analyst/courses/ak8s/04_GKE_Shell/

3.To deploy your manifest, execute the following command:
kubectl apply -f ./new-nginx-pod.yaml


4.To see a list of Pods, execute the following command:

kubectl get pods



Use shell redirection to connect to a Pod

5.In Cloud Shell, execute the following command to start an interactive bash shell in the nginx container:

kubectl exec -it new-nginx /bin/bash


6.In Cloud Shell, in the nginx bash shell, execute the following commands to install the nano text editor:

apt-get update
apt-get install nano

7.In Cloud Shell, in the nginx bash shell, execute the following commands to switch to the static files directory and create a test.html file:

cd /usr/share/nginx/html
nano test.html

8.In Cloud Shell, in the nginx bash shell nano session, type the following text:

<html> <header><title>This is title</title></header>
<body> Hello world </body>
</html>

9.Press CTRL+X, then press Y and enter to save the file and exit the nano editor.


10.In Cloud Shell, in the nginx bash shell, execute the following command to exit the nginx bash shell:

exit


11.In Cloud Shell, execute the following command to set up port forwarding from Cloud Shell to the nginx Pod (from port 10081 of the Cloud Shell VM to port 80 of the nginx container):

kubectl port-forward new-nginx 10081:80	

12.In the Cloud Shell menu bar, click the plus sign (+) icon to start a new Cloud Shell session.


13.In the second Cloud Shell session, execute the following command to test the modified nginx container through the port forwarding:
curl http://127.0.0.1:10081/test.html

14.In the Cloud Shell menu bar, click the plus sign (+) icon to start another new Cloud Shell session.


15.In third Cloud Shell window, execute the following command to display the logs and to stream new logs as they arrive (and also include timestamps) for the new-nginx Pod:

kubectl logs new-nginx -f --timestamps