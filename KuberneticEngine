Task 0. Lab Setup
Access Qwiklabs
GCP Project Dashboard

1.list the active account name with this command:

gcloud auth list


2.list the project ID with this command:

gcloud config list project


Full documentation of gcloud is available on Google Cloud gcloud Overview.

Task 1. Create deployment manifests and deploy to the cluster


#set the environment variable for the zone and cluster name.

export my_zone=us-central1-a
export my_cluster=standard-cluster-1

#Configure kubectl tab completion in Cloud Shell.

source <(kubectl completion bash)


#In Cloud Shell, type the following command to create a Kubernetes cluster.

gcloud container clusters create $my_cluster --num-nodes 3  --enable-ip-alias --zone $my_zone

#In Cloud Shell, configure access to your cluster for the kubectl command-line tool, using the following command:

gcloud container clusters get-credentials $my_cluster --zone $my_zone

#In Cloud Shell enter the following command to clone the repository to the lab Cloud Shell.

git clone https://github.com/GoogleCloudPlatformTraining/training-data-analyst

#Change to the directory that contains the sample files for this lab.

cd ~/training-data-analyst/courses/ak8s/06_Deployments/

Create a deployment manifest
You will create a deployment using a sample deployment manifest called nginx-deployment.yaml that has been provided for you. This deployment is configured to run three Pod replicas with a single nginx container in each Pod listening on TCP port 80.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80

#To deploy your manifest, execute the following command:

kubectl apply -f ./nginx-deployment.yaml

Click Check my progress to verify the objective.
Create and deploy manifest nginx deployment


#To view a list of deployments, execute the following command:

kubectl get deployments


Task 2. Manually scale up and down the number of Pods in deployments
Sometimes, you want to shut down a Pod instance. Other times, you want ten Pods running. In Kubernetes, you can scale a specific Pod to the desired number of instances. To shut them down, you scale to zero.

In this task, you scale Pods up and down in the GCP Console and Cloud Shell.

Scale Pods up and down in the console

Skubectl scale --replicas=1 deployment nginx-deployment


Switch back to the Cloud Shell browser tab.

#In the Cloud Shell, to view a list of Pods in the deployments, execute the following command:

kubectl get deployments


To view a list of Pods in the deployments, execute the following command:

kubectl get deployments



Task 3. Trigger a deployment rollout and a deployment rollback
A deployment's rollout is triggered if and only if the deployment's Pod template (that is, .spec.template) is changed, for example, if the labels or container images of the template are updated. Other updates, such as scaling the deployment, do not trigger a rollout.

In this task, you trigger deployment rollout, and then you trigger deployment rollback.

#Trigger a deployment rollout
To update the version of nginx in the deployment, execute the following command:

kubectl set image deployment.v1.apps/nginx-deployment nginx=nginx:1.9.1 --record

This updates the container image in your Deployment to nginx v1.9.1.

Click Check my progress to verify the objective.
Update version of nginx in the deployment

To view the rollout status, execute the following command:

kubectl rollout status deployment.v1.apps/nginx-deployment


#To verify the change, get the list of deployments.

kubectl get deployments


Trigger a deployment rollback
To roll back an object's rollout, you can use the kubectl rollout undo command.

To roll back to the previous version of the nginx deployment, execute the following command:

kubectl rollout undo deployments nginx-deployment

View the updated rollout history of the deployment.

kubectl rollout history deployment nginx-deployment


Task 4. Define the service type in the manifest
In this task, you create and verify a service that controls inbound traffic to an application. Services can be configured as ClusterIP, NodePort or LoadBalancer types. In this lab you configure a LoadBalancer.

Define service types in the manifest
A manifest file called service-nginx.yaml that deploys a LoadBalancer service type has been provided for you. This service is configured to distribute inbound traffic on TCP port 60000 to port 80 on any containers that have the label app: nginx.

apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  type: LoadBalancer
  selector:
    app: nginx
  ports:
  - protocol: TCP
    port: 60000
    targetPort: 80

#In the Cloud Shell, to deploy your manifest, execute the following command:

kubectl apply -f ./service-nginx.yaml

This manifest defines a service and applies it to Pods that correspond to the selector. In this case, the manifest is applied to the nginx container that you deployed in task 1. This service also applies to any other Pods with the app: nginx label, including any that are created after the service.

Click Check my progress to verify the objective.
Deploy manifest file that deploys LoadBalancer service type

Verify the LoadBalancer creation
To view the details of the nginx service, execute the following command:

kubectl get service nginx


Task 5. Perform a canary deployment
A canary deployment is a separate deployment used to test a new version of your application. A single service targets both the canary and the normal deployments. And it can direct a subset of users to the canary version to mitigate the risk of new releases. The manifest file nginx-canary.yaml that is provided for you deploys a single pod running a newer version of nginx than your main deployment. In this task, you create a canary deployment using this new deployment file.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-canary
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
        track: canary
        Version: 1.9.1
    spec:
      containers:
      - name: nginx
        image: nginx:1.9.1
        ports:
        - containerPort: 80

The manifest for the nginx Service you deployed in the previous task uses a label selector to target the Pods with the app: nginx label. Both the normal deployment and this new canary deployment have the app: nginx label. Inbound connections will be distributed by the service to both the normal and canary deployment Pods. The canary deployment has fewer replicas (Pods) than the normal deployment, and thus it is available to fewer users than the normal deployment.

Create the canary deployment based on the configuration file.

kubectl apply -f nginx-canary.yaml

Click Check my progress to verify the objective.
Create a Canary Deployment

When the deployment is complete, verify that both the nginx and the nginx-canary deployments are present.

kubectl get deployments

Switch back to the browser tab that is connected to the external LoadBalancer service ip and refresh the page. You should continue to see the standard "Welcome to nginx" page.

Switch back to the Cloud Shell and scale down the primary deployment to 0 replicas.

kubectl scale --replicas=0 deployment nginx-deployment

Verify that the only running replica is now the Canary deployment:

kubectl get deployments

Switch back to the browser tab that is connected to the external LoadBalancer service ip and refresh the page. You should continue to see the standard "Welcome to nginx" page showing that the Service is automatically balancing traffic to the canary deployment.

Note: Session affinity
The Service configuration used in the lab does not ensure that all requests from a single client will always connect to the same Pod. Each request is treated separately and can connect to either the normal nginx deployment or to the nginx-canary deployment. This potential to switch between different versions may cause problems if there are significant changes in functionality in the canary release. To prevent this you can set the sessionAffinity field to ClientIP in the specification of the service if you need a client's first request to determine which Pod will be used for all subsequent connections.

For example:

apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  type: LoadBalancer
  sessionAffinity: ClientIP
  selector:
    app: nginx
  ports:
  - protocol: TCP
    port: 60000
    targetPort: 80

End your lab